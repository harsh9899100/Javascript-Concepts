The Dynamic DOM allows us to modify the document structure by adding, removing, or updating elements based on 
user interactions or application state changes. This is a key aspect of creating interactive web applications.

🗝️ a. Dynamically Adding/Removing Content : Dynamically add/remove content based on user interaction.
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣

     1️⃣ Adding Elements Dynamically : You can create new elements using document.createElement() and 
     -------------------------------- add them to the DOM using methods like:
     
                                      appendChild()
                                      append()
                                      insertBefore()
     
     2️⃣ Removing Elements Dynamically : To remove an element, use:
     ----------------------------------

                                        removeChild()
                                        remove()
     
     3️⃣ Replace Elements Dynamically : You can replace elements using replaceChild().
     ---------------------------------
     
     4️⃣ Modifying Inner Content Dynamically : You can update an element’s content using innerHTML or textContent.
     ----------------------------------------

  ________________________________________________________________________
 | Method	       | Description                                          |
 |￣￣￣￣￣￣￣￣￣|￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣|
 | createElement() | Creates a new element.                               |
 | appendChild()   | Appends a child element.                             |
 | append()	       | Appends text or elements.                            |
 | removeChild()   | Removes a child element.                             |
 | remove()	       | Removes the element itself.                          |
 | replaceChild()  | Replaces one child element with another.             |
 | innerHTML	    | Modifies the HTML content inside an element.         |
 | textContent	    | Updates or retrieves text content (excluding HTML).  |
  ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣

-----------------------------------------------------------------------------------------------------------------------------------------------------

🗝️ b. Delegation : Attach a single event listener to a parent element to manage events for its child elements.
￣￣￣￣￣￣￣￣￣￣
    - Event Delegation is a technique in JavaScript where a single event listener is attached to a parent element to 
      manage events for its child elements, even if the child elements are dynamically added later. 
      This is possible because of event bubbling, where events propagate from a child element to its ancestors.

     Why Use Event Delegation?
     -------------------------
       1) Efficiency: Reduces the number of event listeners in your code, improving performance.
       2) Dynamic Content Handling: Works for child elements that are dynamically added to the DOM after the event listener is attached to the parent.
       3) Simpler Code Maintenance: Manages multiple child elements from a single location.
     
     How Event Delegation Works:
     ---------------------------
       1) Attach an event listener to a parent element.
       2) Use the event.target property to identify which child element triggered the event.
       3) Apply the required logic for specific child elements.

 _________________________________________________________________________________
| Method/Property	    | Description                                               |
|￣￣￣￣￣￣￣￣￣￣￣|￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣|
| event.target	       | The element that triggered the event.                     |
| event.currentTarget | The element to which the event listener is attached.      |
| contains(className) | Check if the element has a specific class.                | 
| tagName	          | Retrieves the tag name of the clicked element (e.g., LI). |
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣

     Advantages of Delegation
     ------------------------
          - Handles Dynamic Elements: Events are automatically handled for elements added later.
          - Better Performance: Fewer listeners mean lower memory usage and better performance.
          - Simplified Code: Reduces repetitive event listener setups.
     
     Use Cases for Event Delegation
     ------------------------------
          - Handling click events on items in a list, menu, or table.
          - Managing buttons or input fields dynamically added to a form.
          - Listening for user interactions on dynamic components in single-page applications.

-----------------------------------------------------------------------------------------------------------------------------------------------------

🗝️ c. Mutation Observer : MutationObserver API allows observing changes to the DOM.
￣￣￣￣￣￣￣￣￣￣￣￣￣￣
    - The MutationObserver API is a powerful tool for observing changes to the DOM. It provides a way to detect changes in the structure or attributes of DOM elements, such as:

       - Added or removed child nodes.
       - Changes to attributes or text content.
       - Modifications to the subtree.

      How MutationObserver Works :
      ----------------------------
          1) Create an Observer: Use the MutationObserver constructor to create a new observer instance.
          2) Define a Callback: The callback function executes when changes to the DOM are detected.
          3) Observe a Target Node: Use the observe() method to start observing a DOM node.
          4) Stop Observation: Use the disconnect() method to stop the observer.
      
      Syntax :
      --------
          const observer = new MutationObserver(callback);
          
          observer.observe(targetNode, {
            childList: true, // Observe additions/removals of child nodes
            attributes: true, // Observe changes to attributes
            subtree: true, // Observe the entire subtree
            characterData: true, // Observe changes to text content
          });
          
          // To stop observing
          observer.disconnect();


      MutationRecord Object
      ---------------------
      Each mutation detected is represented by a MutationRecord object with properties:
           _______________________________________________________________________________________
          | Property	     | Description                                                          |
          |￣￣￣￣￣￣￣￣|￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ |
          | type	        | Type of mutation: "childList", "attributes", or "characterData".     |
          | target	     | The node where the mutation occurred.                                |
          | addedNodes	  | A NodeList of added nodes (for childList mutations).                 |
          | removedNodes  | A NodeList of removed nodes (for childList mutations).               |
          | attributeName | Name of the modified attribute (for attributes mutations).           |
          | oldValue	     | The previous value of the attribute or text (if configured).         |
          ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣


      Use Cases of MutationObserver :
      -------------------------------
          - Real-Time DOM Monitoring: Track and respond to dynamic DOM updates.
          - Dynamic Content Management: Detect when new elements are added to or removed from a page.
          - Attribute Watching: Observe changes in styles, classes, or other attributes.
          - Single Page Applications (SPAs): Detect route or component changes.
          - Accessibility Enhancements: Monitor and ensure accessibility features dynamically.    

-----------------------------------------------------------------------------------------------------------------------------------------------------

🗝️ d. Shadow DOM : Encapsulation of a DOM subtree with styles and behavior, often used in Web Components.
￣￣￣￣￣￣￣￣￣￣
     - The Shadow DOM is a key feature of Web Components that allows developers to encapsulate a section of the DOM, 
       including its styles and behavior, to avoid interference with the main document or other components. 
       It provides encapsulation by creating a "shadow tree," a hidden DOM subtree attached to an element.

      Why Use Shadow DOM?
      -------------------
         - Encapsulation: Keeps styles and scripts scoped to the component, preventing conflicts with the global DOM.
         - Reusability: Enables the creation of self-contained, reusable components with isolated functionality.
         - Custom Elements: Works seamlessly with custom elements to create Web Components.
       
      Key Concepts of Shadow DOM :
      ----------------------------
         - Shadow Host: The regular DOM element to which a shadow tree is attached.
         - Shadow Root: The root of the shadow tree. Created using attachShadow.
         - Shadow Tree: The hidden DOM subtree that exists within the shadow root.
       
      Modes in Shadow DOM :
      ---------------------     
         - Open Mode ({ mode: "open" }): The shadow root is accessible via element.shadowRoot.
         - Closed Mode ({ mode: "closed" }): The shadow root is not accessible programmatically.

           const openShadow = document.getElementById("shadow-host").attachShadow({ mode: "open" });
           console.log(openShadow); // Accessible
                                       ..........
           const closedShadow = document.getElementById("shadow-host").attachShadow({ mode: "closed" });
           console.log(closedShadow); // Throws an error
                                         ...............       
      
      Light DOM vs. Shadow DOM : 
      --------------------------
         - Light DOM: Regular DOM that is accessible and styled by global stylesheets.
         - Shadow DOM: Encapsulated DOM that only accepts styles defined within its shadow tree.

      Accessing and Modifying Shadow DOM :
      ------------------------------------
         - When in open mode, the shadow root can be accessed programmatically:

             const shadowRoot = document.querySelector("custom-button").shadowRoot;
             console.log(shadowRoot); // Access the shadow tree
      
      Advantages of Shadow DOM :
      --------------------------
         - Style Encapsulation: Prevents style leakage between components.
         - Reusability: Creates self-contained, portable components.
         - Custom Elements: A foundation for building Web Components.
      
      Disadvantages of Shadow DOM :
      -----------------------------
         - Learning Curve: Slightly more complex than working with regular DOM.
         - Browser Support: Fully supported in modern browsers, but older browsers (like IE) require polyfills.
          