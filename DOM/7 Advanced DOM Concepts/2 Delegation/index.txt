b. Delegation : 
￣￣￣￣￣￣￣￣
    - Event Delegation is a technique in JavaScript where a single event listener is attached to a parent element to 
      manage events for its child elements, even if the child elements are dynamically added later. 
      This is possible because of event bubbling, where events propagate from a child element to its ancestors.

     Why Use Event Delegation?
     -------------------------
       1) Efficiency: Reduces the number of event listeners in your code, improving performance.
       2) Dynamic Content Handling: Works for child elements that are dynamically added to the DOM after the event listener is attached to the parent.
       3) Simpler Code Maintenance: Manages multiple child elements from a single location.
     
     How Event Delegation Works:
     ---------------------------
       1) Attach an event listener to a parent element.
       2) Use the event.target property to identify which child element triggered the event.
       3) Apply the required logic for specific child elements.

 _________________________________________________________________________________
| Method/Property	  | Description                                               |
|￣￣￣￣￣￣￣￣￣￣￣|￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣|
| event.target	      | The element that triggered the event.                     |
| event.currentTarget | The element to which the event listener is attached.      |
| contains(className) | Check if the element has a specific class.                | 
| tagName	          | Retrieves the tag name of the clicked element (e.g., LI). |
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣

     Advantages of Delegation
     ------------------------
          - Handles Dynamic Elements: Events are automatically handled for elements added later.
          - Better Performance: Fewer listeners mean lower memory usage and better performance.
          - Simplified Code: Reduces repetitive event listener setups.
     
     Use Cases for Event Delegation
     ------------------------------
          - Handling click events on items in a list, menu, or table.
          - Managing buttons or input fields dynamically added to a form.
          - Listening for user interactions on dynamic components in single-page applications.